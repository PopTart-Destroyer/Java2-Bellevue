/* T. J. Flesher
 * Bellevue University
 * Assignment 7.1 - UseDivision Class
 * creates two instances of each of these concrete classes (4 total instances)
 */
public class UseDivision
  {
    public static void main(String[] args)
      {
            System.out.println("\n\nDisplaying Information of Organizations\n");
            System.out.println("International --");
            //initiallize InternationDivision class
            InternationalDivision interdiv1 = new InternationalDivision("French", "France","Paris Division", 345);
            interdiv1.display();
            InternationalDivision interdiv2 = new InternationalDivision("Italian", "Italy","Venice Division", 260);
            interdiv2.display();
            
            System.out.println("Domestic --");
            //initialize DomesticDivision Class
            DomesticDivision domdiv1 = new DomesticDivision("Nebraska","Husker Division", 402);
            domdiv1.display();
            DomesticDivision domdiv2 = new DomesticDivision("Colorado","Avalanche Division", 303);
            domdiv2.display();
            
            System.out.println();
            System.exit(0);
      }
  }
/* T. J. Flesher
 * Bellevue University
 * Assignment 7.1 - Division Class
 * Create an abstract Division class with fields for a company's division name and account number, and an abstract display() method that will be defined in the subclasses.  
 * Use a constructor in the superclass that requires values for both fields.
 */
public abstract class Division
  {
    //variables
    String dname;
    int acctnum;
    
    //abstract method for displaying values
    public abstract void display();
    
    //constructor
    public Division(String dname, int acctnum){
        //super();
        this.dname = dname;
        this.acctnum = acctnum;
    }
  }
/* T. J. Flesher
 * Bellevue University
 * Assignment 7.1 - DomesticDivision Class
 * The DomesticDivision class include a field for the state in which the division is 
 * located and a constructor that requires all fields when created.
 */
public class DomesticDivision extends Division
  {
    //variable
    String state;
    
    public DomesticDivision(String state, String dname, int acctnum){
        super(dname, acctnum); //super has to come first else error
        this.state = state;
    }
    
    public void display(){
        System.out.println("Division: " + dname);
        System.out.println("State: " + state);
        System.out.println("AcctNum: " + acctnum + "\n");
    }
  }
/* T. J. Flesher
 * Bellevue University
 * Assignment 7.1 - InternationalDivision Class
 * The InternationalDivision class includes a field for the country in which the division is located, 
 * a field for the language spoken, and a constructor that requires all fields when created.
 */
public class InternationalDivision extends Division
  {
   //variables
    String language, country;
    
    public InternationalDivision(String language, String country, String dname, int acctnum){
        super(dname, acctnum);
        this.language = language;
        this.country = country;
    }
    public void display(){
        System.out.println("Division: " + dname);
        System.out.println("Country: "+ country);
        System.out.println("Language used: " + language);
        System.out.println("AcctNum: "+ acctnum + "\n");
    }
  }
